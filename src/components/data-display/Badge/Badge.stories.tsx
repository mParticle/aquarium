import { type Meta, type StoryObj } from '@storybook/react'
import { Badge } from 'src/components/data-display/Badge/Badge'
import { ExampleStory } from 'src/utils/ExampleStory'
import { Avatar, Button } from 'src/components'
import { Space } from 'src/components'
import { Switch } from 'src/components'
import { Card } from 'src/components'
import { Divider } from 'src/components'
import { useState } from 'react'
import MpLogo from 'src/assets/svg/mpLogo.svg?react'

const meta: Meta<typeof Badge> = {
  title: 'Aquarium/Data Display/Badge',
  component: Badge,

  args: {
    color: '',
    count: 5,
    classNames: undefined,
    dot: false,
    offset: undefined,
    overflowCount: 99,
    showZero: false,
    size: 'default',
    status: undefined,
    styles: undefined,
    text: undefined,
    title: '',
  },
  argTypes: {
    size: {
      control: 'select',
      options: ['default', 'small'],
    },
    status: {
      control: 'select',
      options: ['success', 'processing', 'default', 'error', 'warning'],
    },
  },
}
export default meta

type Story = StoryObj<typeof Badge>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {}

export const DotBadge: Story = {
  args: {
    dot: true,
  },
}

export const SmallSize: Story = {
  args: {
    size: 'small',
  },
}

export const OverflowCount: Story = {
  args: {
    overflowCount: 2,
  },
}

export const CustomColor: Story = {
  args: {
    color: '#f60',
  },
}

export const CustomText: Story = {
  args: {
    text: 'Custom Text',
  },
}

export const HoverTitle: Story = {
  args: {
    title: 'Custom Hovering Text',
  },
}

export const ExampleBasic: Story = {
  render: () => {
    return (
      <ExampleStory title="Simplest Usage. Badge will be hidden when count is 0, but we can use showZero to show it. Or add a custom icon.">
        <Space size="middle">
          <Badge count={5}>
            <Avatar shape="square" size="large" />
          </Badge>
          <Badge count={0} showZero>
            <Avatar shape="square" size="large" />
          </Badge>
          <Badge count={<MpLogo />}>
            <Avatar shape="square" size="large" />
          </Badge>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleStandalone: Story = {
  render: () => {
    const [show, setShow] = useState(true)
    return (
      <ExampleStory title="Used in standalone when children is empty.">
        <Space>
          <Switch
            checked={show}
            onChange={() => {
              setShow(!show)
            }}
          />
          <Badge count={show ? 11 : 0} showZero color="#faad14" />
          <Badge count={show ? 25 : 0} />
          <Badge count={show ? <MpLogo /> : 0} />
          <Badge className="site-badge-count-109" count={show ? 109 : 0} style={{ backgroundColor: '#52c41a' }} />
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleOverflowCount: Story = {
  render: () => {
    return (
      <ExampleStory title="overflowCount+ is displayed when count is larger than overflowCount. The default value of overflowCount is 99.">
        <Space size="large">
          <Badge count={99}>
            <Avatar shape="square" size="large" />
          </Badge>
          <Badge count={100}>
            <Avatar shape="square" size="large" />
          </Badge>
          <Badge count={99} overflowCount={10}>
            <Avatar shape="square" size="large" />
          </Badge>
          <Badge count={1000} overflowCount={999}>
            <Avatar shape="square" size="large" />
          </Badge>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleDynamic: Story = {
  render: () => {
    const [count, setCount] = useState(5)
    const [show, setShow] = useState(true)

    const increase = () => {
      setCount(count + 1)
    }

    const decline = () => {
      let newCount = count - 1
      if (newCount < 0) {
        newCount = 0
      }
      setCount(newCount)
    }

    const random = () => {
      const newCount = Math.floor(Math.random() * 100)
      setCount(newCount)
    }

    const onChange = (checked: boolean) => {
      setShow(checked)
    }

    return (
      <ExampleStory title="The count will be animated as it changes.">
        <Space direction="vertical">
          <Space size="large">
            <Badge count={count}>
              <Avatar shape="square" size="large" />
            </Badge>
            <Button.Group>
              <Button onClick={decline} icon="-" />
              <Button onClick={increase} icon="+" />
              <Button onClick={random} icon="?" />
            </Button.Group>
          </Space>
          <Space size="large">
            <Badge dot={show}>
              <Avatar shape="square" size="large" />
            </Badge>
            <Switch onChange={onChange} checked={show} />
          </Space>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleOffset: Story = {
  render: () => {
    return (
      <ExampleStory title="Set offset of the badge dot, the format is [left, top], which represents the offset of the status dot from the left and top of the default position.">
        <Badge count={5} offset={[10, 10]}>
          <Avatar shape="square" size="large" />
        </Badge>
      </ExampleStory>
    )
  },
}

export const ExampleStatus: Story = {
  render: () => {
    return (
      <ExampleStory title="Standalone badge with status.">
        <Space>
          <Badge status="success" />
          <Badge status="error" />
          <Badge status="default" />
          <Badge status="processing" />
          <Badge status="warning" />
        </Space>
        <br />
        <Space direction="vertical">
          <Badge status="success" text="Success" />
          <Badge status="error" text="Error" />
          <Badge status="default" text="Default" />
          <Badge status="processing" text="Processing" />
          <Badge status="warning" text="Warning" />
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleRibbon: Story = {
  render: () => {
    return (
      <ExampleStory title="Use ribbon badge.">
        <Space direction="vertical" size="middle" style={{ width: '200px' }}>
          <Badge.Ribbon text="Ribbon">
            <Card title="Card Title" size="small">
              Card Inner text
            </Card>
          </Badge.Ribbon>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleClickable: Story = {
  render: () => {
    return (
      <ExampleStory title="The badge can be wrapped with a tag to make it linkable.">
        <a>
          <Badge count={5}>
            <Avatar shape="square" size="large" />
          </Badge>
        </a>
      </ExampleStory>
    )
  },
}

export const ExampleColors: Story = {
  render: () => {
    const colors = [
      'pink',
      'red',
      'yellow',
      'orange',
      'cyan',
      'green',
      'blue',
      'purple',
      'geekblue',
      'magenta',
      'volcano',
      'gold',
      'lime',
    ]
    return (
      <ExampleStory title="We preset a series of colorful Badge styles for use in different situations. You can also set it to a hex color string for custom color.">
        <Divider orientation="left">Presets</Divider>
        <Space direction="vertical">
          {colors.map(color => (
            <Badge key={color} color={color} text={color} />
          ))}
        </Space>
        <Divider orientation="left">Custom</Divider>
        <Space direction="vertical">
          <Badge color="#f50" text="#f50" />
          <Badge color="rgb(45, 183, 245)" text="rgb(45, 183, 245)" />
          <Badge color="hsl(102, 53%, 61%)" text="hsl(102, 53%, 61%)" />
          <Badge color="hwb(205 6% 9%)" text="hwb(205 6% 9%)" />
        </Space>
      </ExampleStory>
    )
  },
}
