import { type Meta } from '@storybook/react'
import { type StoryObj } from '@storybook/react'
import MpLogo from 'src/assets/svg/mpLogo.svg?react'
import { Avatar } from 'src/components/data-display/Avatar/Avatar'
import { ExampleStory } from 'src/utils/ExampleStory'
import { Space } from 'src/components'
import { Badge } from 'src/components'
import { Button } from 'src/components'
import { useState } from 'react'

const meta: Meta<typeof Avatar> = {
  title: 'Aquarium/Data Display/Avatar',
  component: Avatar,

  args: {
    alt: 'User Avatar',
    gap: 4,
    icon: <MpLogo/>,
    shape: 'circle',
    size: 'default',
    src: '',
    srcSet: '',
    draggable: true,
    crossOrigin: '',
    onError: () => true,
  },
  argTypes: {
    crossOrigin: {
      control: 'select',
      options: ['anonymous', 'use-credentials', ''],
    },
    shape: {
      control: 'select',
      options: ['circle', 'square'],
    },
    draggable: {
      control: 'select',
      options: [true, false, 'true', 'false'],
    },
     icon: {
      control: 'select',
      options: ['User', 'Gamepad'],
      mapping: {
        User: <MpLogo/>,
        Gamepad: <MpLogo/>,
      },
    },
  },
}
export default meta

type Story = StoryObj<typeof Avatar>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {}

export const Square: Story = {
  args: {
    shape: 'square',
  },
}

export const Large: Story = {
  args: {
    size: 'large',
  },
}

export const Small: Story = {
  args: {
    size: 'small',
  },
}

export const CustomSizes: Story = {
  args: {
    size: { xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 120 },
  },
}

export const CustomIcon: Story = {
  args: {
    icon: <MpLogo/>,
  },
}

export const ExampleBasic: Story = {
  render: () => {
    return (
      <ExampleStory title="Four sizes and two shapes are available.">
        <Space direction="vertical" size={16}>
          <Space wrap size={16}>
            <Avatar size={64} icon={<MpLogo/>} />
            <Avatar size="large" icon={<MpLogo/>} />
            <Avatar icon={<MpLogo/>} />
            <Avatar size="small" icon={<MpLogo/>} />
          </Space>
          <Space wrap size={16}>
            <Avatar shape="square" size={64} icon={<MpLogo/>} />
            <Avatar shape="square" size="large" icon={<MpLogo/>} />
            <Avatar shape="square" icon={<MpLogo/>} />
            <Avatar shape="square" size="small" icon={<MpLogo/>} />
          </Space>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleTypes: Story = {
  render: () => {
    const url = 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg'
    return (
      <ExampleStory title="Image, Icon and letter are supported, and the latter two kinds of avatar can have custom colors and background colors.">
        <Space size={16} wrap>
          <Avatar icon={<MpLogo/>} />
          <Avatar>U</Avatar>
          <Avatar size={40}>USER</Avatar>
          <Avatar src={url} />
          <Avatar src={<img src={url} alt="avatar" />} />
          <Avatar style={{ backgroundColor: '#fde3cf', color: '#f56a00' }}>U</Avatar>
          <Avatar style={{ backgroundColor: '#87d068' }} icon={<MpLogo/>} />
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleWithBadge: Story = {
  render: () => {
    return (
      <ExampleStory title="Usually used for reminders and notifications.">
        <Space size={24}>
          <Badge count={1}>
            <Avatar shape="square" icon={<MpLogo/>} />
          </Badge>
          <Badge dot>
            <Avatar shape="square" icon={<MpLogo/>} />
          </Badge>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleResponsive: Story = {
  render: () => {
    return (
      <ExampleStory title="Avatar size can be automatically adjusted based on the screen size.">
        <Avatar size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }} icon={<MpLogo/>} />
      </ExampleStory>
    )
  },
}

export const ExampleAutosetFontSize: Story = {
  render: () => {
    const UserList = ['Edward', 'U', 'Lucy', 'Tom']
    const ColorList = ['#f56a00', '#7265e6', '#ffbf00', '#00a2ae']
    const GapList = [4, 3, 2, 1]

    const [user, setUser] = useState(UserList[0])
    const [color, setColor] = useState(ColorList[0])
    const [gap, setGap] = useState(GapList[0])

    const changeUser = (): void => {
      const index = UserList.indexOf(user)
      setUser(index < UserList.length - 1 ? UserList[index + 1] : UserList[0])
      setColor(index < ColorList.length - 1 ? ColorList[index + 1] : ColorList[0])
    }

    const changeGap = (): void => {
      const index = GapList.indexOf(gap)
      setGap(index < GapList.length - 1 ? GapList[index + 1] : GapList[0])
    }

    return (
      <ExampleStory title="For letter type Avatar, when the letters are too long to display, the font size can be automatically adjusted according to the width of the Avatar. You can also use gap to set the unit distance between left and right sides.">
        <Avatar style={{ backgroundColor: color, verticalAlign: 'middle' }} size="large" gap={gap}>
          {user}
        </Avatar>
        <Button size="small" style={{ margin: '0 16px', verticalAlign: 'middle' }} onClick={changeUser}>
          ChangeUser
        </Button>
        <Button size="small" style={{ verticalAlign: 'middle' }} onClick={changeGap}>
          changeGap
        </Button>
      </ExampleStory>
    )
  },
}