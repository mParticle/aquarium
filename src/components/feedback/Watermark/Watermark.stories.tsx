import { type Meta, type StoryObj } from '@storybook/react'
import { Watermark } from 'src/components/feedback/Watermark/Watermark'
import { ExampleStory } from 'src/utils/ExampleStory'
import { Flex, Form } from 'src/components'
import { type GetProp } from 'antd'
import { useState } from 'react'
import { type IColorPickerProps } from 'src/components'
import { type IWatermarkProps } from 'src/components/feedback/Watermark/Watermark'
import { InputNumber } from 'src/components'
import { Typography } from 'src/components/general/Typography/Typography'
import { Input } from 'src/components'
import { ColorPicker } from 'src/components'
import { Slider } from 'src/components'
import { Button } from 'src/components'
import { Modal } from 'src/components'
import { Drawer } from 'src/components'

const meta: Meta<typeof Watermark> = {
  title: 'Aquarium/Feedback/Watermark',
  component: props => (
    <Watermark {...props}>
      <div style={{ height: 500, width: 500 }} />
    </Watermark>
  ),

  args: {
    width: 120,
    height: 64,
    inherit: true,
    rotate: -22,
    zIndex: 9,
    image: undefined,
    content: 'Watermark',
    font: {
      color: 'rgba(0, 0, 0, 0.15)',
      fontSize: 16,
      fontWeight: 'normal',
      fontFamily: 'sans-serif',
      fontStyle: 'normal',
      textAlign: 'center',
    },
    gap: [100, 100],
    offset: [50, 50],
  },
}
export default meta

type Story = StoryObj<typeof Watermark>
/*
  Initial story templates generated by AI.
  ize the stories based on specific requirements.
*/

export const Primary: Story = {}

export const Content: Story = {
  args: {
    content: ['Watermark 1', 'Watermark 2', 'Watermark 3'],
  },
}

export const Font: Story = {
  args: {
    font: {
      fontFamily: 'Helvetica',
      fontSize: 16,
      color: 'rgba(255, 0, 0, 0.2)',
      textAlign: 'right',
    },
  },
}

export const Gap: Story = {
  args: {
    gap: [200, 150],
  },
}

export const Offset: Story = {
  args: {
    offset: [100, 80],
  },
}

export const RotatedWatermark: Story = {
  args: {
    rotate: 45,
  },
}

export const ExampleBasic: Story = {
  render: () => {
    return (
      <ExampleStory title="The most basic usage.">
        <Watermark content="Ant Design">
          <div style={{ height: 500 }} />
        </Watermark>
      </ExampleStory>
    )
  },
}

export const ExampleMultiline: Story = {
  render: () => {
    return (
      <ExampleStory title="Use content to set a string array to specify multi-line text watermark content.">
        <Watermark content={['Ant Design', 'Happy Working']}>
          <div style={{ height: 500 }} />
        </Watermark>
      </ExampleStory>
    )
  },
}

export const ExampleConfig: Story = {
  render: () => {
    type Color = GetProp<IColorPickerProps, 'color'>

    interface WatermarkConfig {
      content: string
      color: string | Color
      fontSize: number
      zIndex: number
      rotate: number
      gap: [number, number]
      offset?: [number, number]
    }

    const [form] = Form.useForm()
    const [config, setConfig] = useState<WatermarkConfig>({
      content: 'Ant Design',
      color: 'rgba(0, 0, 0, 0.15)',
      fontSize: 16,
      zIndex: 11,
      rotate: -22,
      gap: [100, 100],
      offset: undefined,
    })
    const { content, color, fontSize, zIndex, rotate, gap, offset } = config

    const watermarkProps: IWatermarkProps = {
      content,
      zIndex,
      rotate,
      gap,
      offset,
      font: { color: typeof color === 'string' ? color : color.toRgbString(), fontSize },
    }

    return (
      <ExampleStory title="Preview the watermark effect by configuring custom parameters.">
        <Flex gap="middle">
          <Watermark {...watermarkProps}>
            <Typography.Paragraph>
              The light-speed iteration of the digital world makes products more complex. However, human consciousness
              and attention resources are limited. Facing this design contradiction, the pursuit of natural
              interaction will be the consistent direction of Ant Design.
            </Typography.Paragraph>
            <Typography.Paragraph>
              Natural user cognition: According to cognitive psychology, about 80% of external information is obtained
              through visual channels. The most important visual elements in the interface design, including layout,
              colors, illustrations, icons, etc., should fully absorb the laws of nature, thereby reducing the
              user&apos;s cognitive cost and bringing authentic and smooth feelings. In some scenarios, opportunely
              adding other sensory channels such as hearing, touch can create a richer and more natural product
              experience.
            </Typography.Paragraph>
            <Typography.Paragraph>
              Natural user behavior: In the interaction with the system, the designer should fully understand the
              relationship between users, system roles, and task objectives, and also contextually organize system
              functions and services. At the same time, a series of methods such as behavior analysis, artificial
              intelligence and sensors could be applied to assist users to make effective decisions and reduce extra
              operations of users, to save users&apos; mental and physical resources and make human-computer
              interaction more natural.
            </Typography.Paragraph>
            <img
              style={{ zIndex: 10, width: '100%', maxWidth: 800, position: 'relative' }}
              src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*zx7LTI_ECSAAAAAAAAAAAABkARQnAQ"
              alt="img"
            />
          </Watermark>
          <Form
            style={{ width: 280, flexShrink: 0, borderLeft: '1px solid #eee', paddingInlineStart: 16 }}
            form={form}
            layout="vertical"
            initialValues={config}
            onValuesChange={(_, values: WatermarkConfig) => {
              setConfig(values)
            }}>
            <Form.Item name="content" label="Content">
              <Input placeholder="请输入" />
            </Form.Item>
            <Form.Item name="color" label="Color">
              <ColorPicker />
            </Form.Item>
            <Form.Item name="fontSize" label="FontSize">
              <Slider step={1} min={1} max={100} />
            </Form.Item>
            <Form.Item name="zIndex" label="zIndex">
              <Slider step={1} min={0} max={100} />
            </Form.Item>
            <Form.Item name="rotate" label="Rotate">
              <Slider step={1} min={-180} max={180} />
            </Form.Item>
            <Form.Item label="Gap" style={{ marginBottom: 0 }}>
              <Flex gap="small">
                <Form.Item name={['gap', 0]}>
                  <InputNumber placeholder="gapX" style={{ width: '100%' }} />
                </Form.Item>
                <Form.Item name={['gap', 1]}>
                  <InputNumber placeholder="gapY" style={{ width: '100%' }} />
                </Form.Item>
              </Flex>
            </Form.Item>
            <Form.Item label="Offset" style={{ marginBottom: 0 }}>
              <Flex gap="small">
                <Form.Item name={['offset', 0]}>
                  <InputNumber placeholder="offsetLeft" style={{ width: '100%' }} />
                </Form.Item>
                <Form.Item name={['offset', 1]}>
                  <InputNumber placeholder="offsetTop" style={{ width: '100%' }} />
                </Form.Item>
              </Flex>
            </Form.Item>
          </Form>
        </Flex>
      </ExampleStory>
    )
  },
}

export const ExampleModalOrDrawer: Story = {
  render: () => {
    const style: React.CSSProperties = {
      height: 300,
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'rgba(150, 150, 150, 0.2)',
    }

    const placeholder = <div style={style}>A mock height</div>

    const [showModal, setShowModal] = useState(false)
    const [showDrawer, setShowDrawer] = useState(false)
    const [showDrawer2, setShowDrawer2] = useState(false)

    const closeModal = (): void => {
      setShowModal(false)
    }
    const closeDrawer = (): void => {
      setShowDrawer(false)
    }
    const closeDrawer2 = (): void => {
      setShowDrawer2(false)
    }

    return (
      <ExampleStory title="Use in Modal and Drawer.">
        <>
          <Flex gap="middle">
            <Button
              type="primary"
              onClick={() => {
                setShowModal(true)
              }}>
              Show in Modal
            </Button>
            <Button
              type="primary"
              onClick={() => {
                setShowDrawer(true)
              }}>
              Show in Drawer
            </Button>
            <Button
              type="primary"
              onClick={() => {
                setShowDrawer2(true)
              }}>
              Not Shown in Drawer
            </Button>
          </Flex>
          <Watermark content="Ant Design">
            <Modal destroyOnClose open={showModal} title="Modal" onCancel={closeModal} onOk={closeModal}>
              {placeholder}
            </Modal>
            <Drawer destroyOnClose open={showDrawer} title="Drawer" onClose={closeDrawer}>
              {placeholder}
            </Drawer>
          </Watermark>
          <Watermark content="Ant Design" inherit={false}>
            <Drawer destroyOnClose open={showDrawer2} title="Drawer" onClose={closeDrawer2}>
              {placeholder}
            </Drawer>
          </Watermark>
        </>
      </ExampleStory>
    )
  },
}
