import { type Meta, type StoryObj } from '@storybook/react'
import { Icon, Space } from 'src/components'
import { Progress } from 'src/components/feedback/Progress/Progress'
import { ExampleStory } from 'src/utils/ExampleStory'
import { Button } from 'src/components'
import { useState } from 'react'
import { Tooltip } from 'src/components'

const meta: Meta<typeof Progress> = {
  title: 'Aquarium/Feedback/Progress',
  component: Progress,

  args: {
    percent: 0,
    showInfo: true,
    status: undefined,
    strokeColor: undefined,
    strokeLinecap: 'round',
    success: undefined,
    trailColor: undefined,
    style: { width: '100px' },
    type: 'line',
    size: 'default',
    format: percent => `${percent}%`,
  },
}
export default meta

type Story = StoryObj<typeof Progress>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {}

export const HalfWay: Story = {
  args: {
    percent: 50,
  },
}

export const Success: Story = {
  args: {
    percent: 50,
    status: 'success',
  },
}

export const Exception: Story = {
  args: {
    percent: 30,
    status: 'exception',
  },
}

export const Active: Story = {
  args: {
    percent: 50,
    status: 'active',
  },
}

export const WithCustomColors: Story = {
  args: {
    percent: 70,
    strokeColor: '#1890ff',
    trailColor: '#f0f0f0',
  },
}

export const CircleType: Story = {
  args: {
    percent: 50,
    type: 'circle',
  },
}

export const DashboardType: Story = {
  args: {
    percent: 50,
    type: 'dashboard',
  },
}

export const SmallSize: Story = {
  args: {
    percent: 50,
    size: 'small',
  },
}

export const CustomFormat: Story = {
  args: {
    percent: 50,
    format: (percent, successPercent) => `Progress: ${percent}% (Success: ${successPercent}%)`,
  },
}

export const ExampleProgress: Story = {
  render: () => {
    return (
      <ExampleStory title="A standard progress bar.">
        <>
          <Progress percent={30} />
          <Progress percent={50} status="active" />
          <Progress percent={70} status="exception" />
          <Progress percent={100} />
          <Progress percent={50} showInfo={false} />
        </>
      </ExampleStory>
    )
  },
}

export const ExampleCircle: Story = {
  render: () => {
    return (
      <ExampleStory title="A circular progress bar.">
        <Space wrap>
          <Progress type="circle" percent={75} />
          <Progress type="circle" percent={70} status="exception" />
          <Progress type="circle" percent={100} />
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleSmall: Story = {
  render: () => {
    return (
      <ExampleStory title="Appropriate for a narrow area.">
        <div style={{ width: 170 }}>
          <Progress percent={30} size="small" />
          <Progress percent={50} size="small" status="active" />
          <Progress percent={70} size="small" status="exception" />
          <Progress percent={100} size="small" />
        </div>
      </ExampleStory>
    )
  },
}

export const ExampleResponsive: Story = {
  render: () => {
    return (
      <ExampleStory title="Responsive circular progress bar. When width is smaller than 20, progress information will be displayed in Tooltip.">
        <Progress
          type="circle"
          trailColor="#e6f4ff"
          percent={60}
          strokeWidth={20}
          size={14}
          format={number => `Tooltip with percent info - ${number}%`}
        />
      </ExampleStory>
    )
  },
}

export const ExampleDynamic: Story = {
  render: () => {
    const [percent, setPercent] = useState<number>(0)

    const increase = () => {
      setPercent(prevPercent => {
        const newPercent = prevPercent + 10
        if (newPercent > 100) {
          return 100
        }
        return newPercent
      })
    }

    const decline = () => {
      setPercent(prevPercent => {
        const newPercent = prevPercent - 10
        if (newPercent < 0) {
          return 0
        }
        return newPercent
      })
    }
    return (
      <ExampleStory title="A dynamic progress bar is better.">
        <div style={{ marginBottom: 10 }}>
          <Progress percent={percent} />
          <Progress type="circle" percent={percent} />
        </div>
        <Button.Group>
          <Button onClick={decline} icon={<Icon name="add" />} />
          <Button onClick={increase} icon={<Icon name="mpLogo" />} />
        </Button.Group>
      </ExampleStory>
    )
  },
}

export const ExampleSegments: Story = {
  render: () => {
    return (
      <ExampleStory title="Show several parts of progress with different status.">
        <Tooltip title="3 done / 3 in progress / 4 to do">
          <Progress percent={60} success={{ percent: 30 }} />
        </Tooltip>
        <Space wrap>
          <Tooltip title="3 done / 3 in progress / 4 to do">
            <Progress percent={60} success={{ percent: 30 }} type="circle" />
          </Tooltip>
          <Tooltip title="3 done / 3 in progress / 4 to do">
            <Progress percent={60} success={{ percent: 30 }} type="dashboard" />
          </Tooltip>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleGradient: Story = {
  render: () => {
    const twoColors = { '0%': '#108ee9', '100%': '#87d068' }
    const conicColors = { '0%': '#87d068', '50%': '#ffe58f', '100%': '#ffccc7' }
    return (
      <ExampleStory title={<> </>}>
        <div style={{ display: 'flex', flexDirection: 'column', rowGap: 16 }}>
          <Progress percent={99.9} strokeColor={twoColors} />
          <Progress percent={50} status="active" strokeColor={{ from: '#108ee9', to: '#87d068' }} />
          <Space wrap>
            <Progress type="circle" percent={90} strokeColor={twoColors} />
            <Progress type="circle" percent={100} strokeColor={twoColors} />
            <Progress type="circle" percent={93} strokeColor={conicColors} />
          </Space>
          <Space wrap>
            <Progress type="dashboard" percent={90} strokeColor={twoColors} />
            <Progress type="dashboard" percent={100} strokeColor={twoColors} />
            <Progress type="dashboard" percent={93} strokeColor={conicColors} />
          </Space>
        </div>
      </ExampleStory>
    )
  },
}

export const ExampleProgressSize: Story = {
  render: () => {
    return (
      <ExampleStory title="The size of progress.">
        <Space direction="vertical">
          <Progress percent={50} />
          <Progress percent={50} size="small" />
          <Progress percent={50} size={[300, 20]} />
        </Space>
        <br />
        <br />
        <Space size={30}>
          <Progress type="circle" percent={50} />
          <Progress type="circle" percent={50} size="small" />
          <Progress type="circle" percent={50} size={20} />
        </Space>
        <br />
        <br />
        <Space size={30}>
          <Progress type="dashboard" percent={50} />
          <Progress type="dashboard" percent={50} size="small" />
          <Progress type="dashboard" percent={50} size={20} />
        </Space>
        <br />
        <br />
        <Space size={30} wrap>
          <Progress steps={3} percent={50} />
          <Progress steps={3} percent={50} size="small" />
          <Progress steps={3} percent={50} size={20} />
          <Progress steps={3} percent={50} size={[20, 30]} />
        </Space>
      </ExampleStory>
    )
  },
}
