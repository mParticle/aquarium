import { type Meta } from '@storybook/react'
import { type StoryObj } from '@storybook/react'
import { Space } from 'src/components'
import { Switch } from 'src/components'
import { Text } from 'src/components/general/Typography/Typography'
import { ExampleStory } from 'src/utils/ExampleStory'
import { useState } from 'react'
import { expect } from '@storybook/test'

const meta: Meta<typeof Text> = {
  title: 'Aquarium/General/Text',
  component: props => <Text {...props}>Example Text</Text>,

  args: {
    code: false,
    copyable: false,
    delete: false,
    disabled: false,
    editable: false,
    ellipsis: false,
    keyboard: false,
    mark: false,
    strong: false,
    italic: false,
    type: undefined,
    underline: false,
    onClick: (event: React.MouseEvent) => {
      console.log('Text Clicked')
    },
  },
  argTypes: {
    type: {
      control: 'select',
      options: ['secondary', 'success', 'warning', 'danger'],
    },
  },
}
export default meta

type Story = StoryObj<typeof Text>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {
  play: async context => {
    const text = context.canvasElement.querySelector('span')
    void expect(text?.textContent).toEqual('Example Text')
  },
}

export const Code: Story = {
  args: {
    code: true,
  },
}

export const Copyable: Story = {
  args: {
    copyable: true,
  },
}

export const Deleted: Story = {
  args: {
    delete: true,
  },
}

export const Disabled: Story = {
  args: {
    disabled: true,
  },
}

export const Editable: Story = {
  args: {
    editable: true,
  },
}

export const Keyboard: Story = {
  args: {
    keyboard: true,
  },
}

export const Marked: Story = {
  args: {
    mark: true,
  },
}

export const Strong: Story = {
  args: {
    strong: true,
  },
}

export const Italic: Story = {
  args: {
    italic: true,
  },
}

export const Success: Story = {
  args: {
    type: 'success',
  },
}

export const Secondary: Story = {
  args: {
    type: 'secondary',
  },
}

export const Warning: Story = {
  args: {
    type: 'warning',
  },
}

export const Danger: Story = {
  args: {
    type: 'danger',
  },
}

export const Underline: Story = {
  args: {
    underline: true,
  },
}

export const CustomOnClick: Story = {
  args: {
    onClick: event => {
      alert('Custom Click Handler')
    },
  },
}

export const ExampleTexts: Story = {
  render: () => {
    return (
      <ExampleStory title={<> </>}>
        <Space direction="vertical">
          <Text>Ant Design (default)</Text>
          <Text type="secondary">Ant Design (secondary)</Text>
          <Text type="success">Ant Design (success)</Text>
          <Text type="warning">Ant Design (warning)</Text>
          <Text type="danger">Ant Design (danger)</Text>
          <Text disabled>Ant Design (disabled)</Text>
          <Text mark>Ant Design (mark)</Text>
          <Text code>Ant Design (code)</Text>
          <Text keyboard>Ant Design (keyboard)</Text>
          <Text underline>Ant Design (underline)</Text>
          <Text delete>Ant Design (delete)</Text>
          <Text strong>Ant Design (strong)</Text>
          <Text italic>Ant Design (italic)</Text>
        </Space>
      </ExampleStory>
    )
  },
}

export const ExampleEllipsis: Story = {
  render: () => {
    const [ellipsis, setEllipsis] = useState(true)
    return (
      <ExampleStory title="Toggle ellipsis on and off.">
        <Switch
          checked={ellipsis}
          onChange={() => {
            setEllipsis(!ellipsis)
          }}
        />
        <Text
          style={ellipsis ? { width: 200 } : undefined}
          ellipsis={ellipsis ? { tooltip: 'I am ellipsis now!' } : false}
        >
          Ant Design, a design language for background applications, is refined by Ant UED Team.
        </Text>
        <Text
          code
          style={ellipsis ? { width: 200 } : undefined}
          ellipsis={ellipsis ? { tooltip: 'I am ellipsis now!' } : false}
        >
          Ant Design, a design language for background applications, is refined by Ant UED Team.
        </Text>
      </ExampleStory>
    )
  },
}
