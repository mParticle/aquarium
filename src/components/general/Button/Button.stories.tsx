import { Button } from 'src/components/general/Button/Button'
import { type Meta, type StoryObj } from '@storybook/react'
import { userEvent } from '@storybook/test'
import { Divider, Flex, Icon, Typography } from 'src/components'
import React from 'react'

const meta: Meta<typeof Button> = {
  title: 'Components/General/Button',
  component: props => <Button {...props}>{props.children ?? 'Button Label'}</Button>,

  args: {
    danger: false,
    disabled: false,
    ghost: false,
    loading: false,
    shape: 'default',
    size: 'middle',
    type: 'primary',
  },

  argTypes: {
    shape: {
      control: 'select',
      options: ['default', 'circle', 'round'],
    },
    size: {
      control: 'select',
      options: ['small', 'medium', 'large'],
    },
    type: {
      control: 'select',
      options: ['primary', 'dashed', 'link', 'text', 'default'],
    },
  },
}
export default meta

type Story = StoryObj<typeof Button>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {
  args: {
    type: 'primary',
    children: 'Create',
  },
  play: async context => {
    const button = context.canvasElement.querySelector('button')
    if (button) {
      await userEvent.click(button) // Click the button
    } else {
      throw new Error('Button not found')
    }
  },
}

export const PrimaryWithIcon: Story = {
  args: {
    type: 'primary',
    icon: <Icon name="add" size="sm" />,
    children: 'Add',
  },
}

export const Default: Story = {
  args: {
    type: 'default',
    children: 'Cancel',
  },
}

export const DefaultWithIcon: Story = {
  args: {
    type: 'default',
    icon: <Icon size="sm" name="transformation" />,
    children: 'View Columns',
  },
}

export const Dashed: Story = {
  args: {
    type: 'dashed',
  },
}

export const DashedWithIcon: Story = {
  args: {
    type: 'dashed',
    icon: <Icon size="sm" name="add" />,
    children: 'Connect Output',
  },
}

export const Link: Story = {
  args: {
    type: 'link',
    children: 'Retry',
  },
}

export const LinkWithIcon: Story = {
  args: {
    type: 'link',
    icon: <Icon name="add" />,
    children: 'Add Audience Criteria',
  },
}

export const IconOnly: Story = {
  render: () => {
    return (
      <>
        <Flex gap="small" align="center">
          <Button icon={<Icon name="zoomOut" />} />
          <Typography.Text>100%</Typography.Text>
          <Button icon={<Icon name="zoomIn" />} />
          <Divider type="vertical" />
          <Button icon={<Icon name="fitToScreen" />} />
        </Flex>
      </>
    )
  },
}
