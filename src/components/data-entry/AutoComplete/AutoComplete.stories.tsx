import { type Meta, type StoryObj } from '@storybook/react'
import { useState } from 'react'
import { AutoComplete } from 'src/components'
import { type IAutoCompleteProps } from 'src/components/data-entry/AutoComplete/AutoComplete'

const baseOptions = [
  { label: 'The quick brown fox jumps over the lazy dog', value: 1 },
  { label: 'Waxy and quivering, jocks fumble the pizza', value: 2 },
  { label: 'When zombies arrive, quickly fax judge Pat', value: 3 },
  { label: 'Pack my red box with five dozen quality jugs', value: 4 },
  { label: 'The quick onyx goblin jumps over the lazy dwarf', value: 5 },
]

const meta: Meta<typeof AutoComplete> = {
  title: 'Components/Data Entry/Auto Complete',
  component: props => {
    const [value, setValue] = useState<IAutoCompleteProps['value']>('')
    const [options, setOptions] = useState<IAutoCompleteProps['options']>([])

    const getPanelValue = (searchText: string): IAutoCompleteProps['options'] => {
      if (!searchText) return []
      return baseOptions.filter(o => o.label.toLowerCase().includes(searchText.toLowerCase()))
    }

    const onSearch = (text: string) => {
      setOptions(getPanelValue(text))
    }
    const onSelect = (value: string) => {
      console.log('you selected value: ' + value)
    }

    return (
      <>
        <AutoComplete
          {...props}
          value={value}
          options={options}
          onSelect={onSelect}
          onSearch={onSearch}
          onChange={setValue}
        />
      </>
    )
  },

  args: {
    placeholder: 'Search AutoComplete',
    allowClear: false,
    autoFocus: false,
    backfill: false,
    defaultActiveFirstOption: true,
    disabled: false,
    options: baseOptions,
    status: undefined,
    value: undefined,
    onChange: value => {
      alert(`Selected Value: ${value}`)
    },
    onFocus: () => {
      console.log('Focus Event')
    },
    onSearch: value => {
      alert(`Search Value: ${value}`)
    },
    onSelect: (value, option) => {
      alert(`Selected Value: ${value}, Option: ${String(option.label)}`)
    },
    onClear: () => {
      alert('Clear Event')
    },
  },
  argTypes: {
    status: {
      control: 'select',
      options: ['error', 'warning'],
    },
  },
}
export default meta

type Story = StoryObj<typeof AutoComplete>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Primary: Story = {
  args: {
    placeholder: '-Select-',
    style: { width: 200 },
  },
}
