import { Input, type InputRef } from 'src/components'
import { Button } from 'src/components/general/Button/Button'
import { type Meta, type StoryObj } from '@storybook/react'
import { ExampleStory } from 'src/utils/ExampleStory'
import { useRef } from 'react'
import { Space } from 'src/components'
import { expect, userEvent } from '@storybook/test'

const meta: Meta<typeof Input> = {
  title: 'Aquarium/Data Entry/Input',
  component: Input,

  args: {
    placeholder: 'Input Placeholder',
    addonAfter: undefined,
    addonBefore: undefined,
    allowClear: false,
    bordered: true,
    classNames: {},
    count: undefined,
    defaultValue: '',
    disabled: false,
    id: undefined,
    maxLength: undefined,
    prefix: undefined,
    showCount: false,
    status: undefined,
    styles: {},
    size: 'middle',
    suffix: undefined,
    type: 'text',
    value: '',
    onChange: e => {
      console.log('Input changed: ' + e.target.value)
    },
    onPressEnter: e => {
      console.log('Enter key pressed: ' + String(e))
    },
  },

  argTypes: {
    status: {
      control: 'select',
      options: ['warning', 'error'],
    },
    size: {
      control: 'select',
      options: ['small', 'medium', 'large'],
    },
  },
}
export default meta

type Story = StoryObj<typeof Input>

/*
  Initial story templates generated by AI.
  Customize the stories based on specific requirements.
*/

export const Error: Story = {
  args: {
    status: 'error',
  },
}

export const TextArea: Story = {
  args: {
    type: 'textarea',
  },
}

export const Large: Story = {
  args: {
    size: 'large',
  },
}

export const Middle: Story = {
  args: {
    size: 'middle',
  },
}

export const Small: Story = {
  args: {
    size: 'small',
  },
}

export const Primary: Story = {}

export const WithHttpsBefore: Story = {
  args: {
    addonBefore: 'https://',
    placeholder: 'Enter URL',
  },
}

export const WithDotComAfter: Story = {
  args: {
    addonAfter: '.com',
    placeholder: 'Domain',
  },
}

export const AllowClear: Story = {
  args: {
    allowClear: true,
    placeholder: 'Clearable Input',
  },
}

export const Disabled: Story = {
  args: {
    disabled: true,
  },
}

export const WithMaxLength: Story = {
  args: {
    maxLength: 10,
    placeholder: 'Max 10 characters',
  },
}

export const WithPrefixAndSuffix: Story = {
  args: {
    prefix: '@',
    suffix: '.com',
    placeholder: 'Email',
  },
}

export const WithFocusManagement: Story = {
  args: {
    value: 'Test value',
  },
  render: (props, meta) => {
    const inputRef = useRef<InputRef>(null)

    const focus = (cursor: 'start' | 'end' | 'all' = 'start') => {
      inputRef.current?.focus({
        cursor,
      })
    }

    return (
      <ExampleStory title={meta.name}>
        <Space direction="vertical" style={{ width: '100%' }}>
          <Space wrap>
            <Button
              onClick={() => {
                focus('start')
              }}>
              Focus at start
            </Button>
            <Button
              onClick={() => {
                focus('end')
              }}>
              Focus at last
            </Button>
            <Button
              onClick={() => {
                focus('all')
              }}>
              Focus to select all
            </Button>
          </Space>
          <br />
          <Input {...props} defaultValue="Welcome to the Aquarium" ref={inputRef} />
        </Space>
      </ExampleStory>
    )
  },
  play: async story => {
    const input = story.canvasElement.querySelector('input')
    await expect(input).toBeInTheDocument()

    const buttons = story.canvasElement.querySelectorAll('button')
    await expect(buttons.length).toBe(3)

    for (const button of buttons) {
      input?.blur()
      await userEvent.click(button)
      await expect(input).toHaveFocus()
      input?.blur()
    }
  },
}
