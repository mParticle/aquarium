var m=(a,e,t)=>new Promise((o,i)=>{var v=r=>{try{s(t.next(r))}catch(p){i(p)}},d=r=>{try{s(t.throw(r))}catch(p){i(p)}},s=r=>r.done?o(r.value):Promise.resolve(r.value).then(v,d);s((t=t.apply(a,e)).next())});import{_ as n,l as g,K as c,k as l,L as f}from"./Using existing ones-DXPug3q1.js";import{p as u}from"./mermaid-parser.core-BRhcNp8B.js";import"./jsx-runtime-CS-_a2eV.js";import"./index-Ca44TZ0D.js";import"./index-Bqh_nw6E.js";import"./iframe-BgbtFvUI.js";import"../sb-preview/runtime.js";import"./dayjs.min-kn1EBQqj.js";import"./index-DrFu-skq.js";import"./Serializer-DsJDcYJc.js";import"./_baseUniq-DtQZ_MJx.js";import"./_basePickBy-CkXKVWwF.js";import"./clone-jgIDGyVL.js";var x={parse:n(a=>m(void 0,null,function*(){const e=yield u("info",a);g.debug(e)}),"parse")},_={version:f},b=n(()=>_.version,"getVersion"),w={getVersion:b},y=n((a,e,t)=>{g.debug(`rendering info diagram
`+a);const o=c(e);l(o,100,400,!0),o.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${t}`)},"draw"),S={draw:y},T={parser:x,db:w,renderer:S};export{T as diagram};
